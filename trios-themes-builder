#!/bin/bash
#
# Script for (re)building variants of the main TRIOS Gtk theme.
#
# 2015 Filip Danilovic <filip@openmailbox.org>

# Check if we are being run from /usr/bin and as root.
# We need to know whether we're updating preinstalled themes in 
# /usr/share/themes, or freshly downloaded or cloned ones, for which we need
# to reside in the same ( non-root ) directory.
#

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

if [[ $DIR == *"/usr/bin"* ]]
then
    if [ "$EUID" -ne 0 ]
        then echo "Please run as root"
        exit
    else
        ROOT_BUILD=true
    fi
else
    ROOT_BUILD=false
fi


# TODO: Add usage info. Build Openbox, xfce4-notify themes as well.


# Dirs and names:

DARK=TRIOS-Dark
GREY=TRIOS-Grey
LIGHT=TRIOS-Light

if [ "$ROOT_BUILD" == "true" ]; then
    DIR=/usr/share/themes
else
    DIR=`/bin/pwd`
fi


# Lines we're replacing:
#
# selected_bg_color:#CF4242 | gtk-2.0/gtkrc & gtk-3.0/settings.ini
#
# #CF4242; | gtk-3.0/gtk.css
#

############################################
# Functions for building a specific variant:
############################################

# TRIOS-Grey-Blue:

grey-blue() {

COLOR=#578ED4

	echo Building $GREY-Blue:
    cd $DIR
    cp -fpR ./$GREY $GREY-Blue && cd $GREY-Blue
    sed -i s/selected_bg_color:#CF4242/"selected_bg_color:$COLOR"/g ./gtk-2.0/gtkrc
    sed -i s/selected_bg_color:#CF4242/"selected_bg_color:$COLOR"/g ./gtk-3.0/settings.ini
    sed -i s/"#CF4242;"/"$COLOR;"/g ./gtk-3.0/gtk.css
    cd ..
	echo DONE!
}


# TRIOS-Grey-Green:

grey-green() {

COLOR=#32B35D

	echo Building $GREY-Green:
    cd $DIR
    cp -fpR ./$GREY $GREY-Green && cd $GREY-Green
    sed -i s/selected_bg_color:#CF4242/"selected_bg_color:$COLOR"/g ./gtk-2.0/gtkrc
    sed -i s/selected_bg_color:#CF4242/"selected_bg_color:$COLOR"/g ./gtk-3.0/settings.ini
    sed -i s/"#CF4242;"/"$COLOR;"/g ./gtk-3.0/gtk.css
    cd ..
	echo DONE!
}


# TRIOS-Grey-Grey:

grey-grey () {

COLOR=#808080

	echo Building $GREY-Grey:
    cd $DIR
    cp -fpR ./$GREY $GREY-Grey && cd $GREY-Grey
    sed -i s/selected_bg_color:#CF4242/"selected_bg_color:$COLOR"/g ./gtk-2.0/gtkrc
    sed -i s/selected_bg_color:#CF4242/"selected_bg_color:$COLOR"/g ./gtk-3.0/settings.ini
    sed -i s/"#CF4242;"/"$COLOR;"/g ./gtk-3.0/gtk.css
    cd ..
	echo DONE!
}


################
# Dark variants:
################

# TRIOS-Dark-Blue:

dark-blue() {

COLOR=#578ED4

	echo Building $DARK-Blue:
    cd $DIR
    cp -fpR ./$DARK $DARK-Blue && cd $DARK-Blue
    sed -i s/selected_bg_color:#C12D2D/"selected_bg_color:$COLOR"/g ./gtk-2.0/gtkrc
    sed -i s/selected_bg_color:#C12D2D/"selected_bg_color:$COLOR"/g ./gtk-3.0/settings.ini
    sed -i s/"#C12D2D;"/"$COLOR;"/g ./gtk-3.0/gtk.css
    cd ..
	echo DONE!
}


# TRIOS-Dark-Green:

dark-green() {

COLOR=#32B35D

	echo Building $DARK-Green:
    cd $DIR
    cp -fpR ./$DARK $DARK-Green && cd $DARK-Green
    sed -i s/selected_bg_color:#C12D2D/"selected_bg_color:$COLOR"/g ./gtk-2.0/gtkrc
    sed -i s/selected_bg_color:#C12D2D/"selected_bg_color:$COLOR"/g ./gtk-3.0/settings.ini
    sed -i s/"#C12D2D;"/"$COLOR;"/g ./gtk-3.0/gtk.css
    cd ..
	echo DONE!
}


# TRIOS-Dark-Grey:

dark-grey () {

COLOR=#808080

	echo Building $DARK-Grey:
    cd $DIR
    cp -fpR ./$DARK $DARK-Grey && cd $DARK-Grey
    sed -i s/selected_bg_color:#C12D2D/"selected_bg_color:$COLOR"/g ./gtk-2.0/gtkrc
    sed -i s/selected_bg_color:#C12D2D/"selected_bg_color:$COLOR"/g ./gtk-3.0/settings.ini
    sed -i s/"#C12D2D;"/"$COLOR;"/g ./gtk-3.0/gtk.css
    cd ..
	echo DONE!
}

#################################################
# Cleaning functions. Git one is used for Debian
# packaging, prevents lintian from complaining:
#################################################

clean-git () {

MSG=$1

	if [ -z "$MSG" ]; then
		echo -Cleaning Git related files:
	else
		echo -Git related files:
	fi

	if [ -d ./.git -o -f ./.gitignore ]; then
		rm -fr ./.git* && echo " -Git dirs/files removed."
	else
		echo " -Git specific files not found, nothing to clean."
	fi

}


clean-build () {

MSG=$1

	if [ -z "$MSG" ]; then
	echo "-Cleaning allready built variants:"
	else
		echo -Allready built variants:
	fi

	if [ -d ./$GREY-Blue -o -d ./$GREY-Green -o -d ./$GREY-Grey ]; then
		rm -fr $GREY-*; echo " -$GREY variants removed."
	else
		echo " -$GREY variants not found/built, nothing to remove."
	fi


	if [ -d ./$DARK-Blue -o -d ./$DARK-Green -o -d ./$DARK-Grey ]; then
		rm -fr $DARK-*; echo " -$DARK variants removed."
	else
		echo " -$DARK variants not found/built, nothing to remove."
	fi


	if [ -d ./$LIGHT-Blue -o -d ./$LIGHT-Green -o -d ./$LIGHT-Grey ]; then
		rm -fr $LIGHT-*; echo " -$LIGHT variants removed."
	else
		echo " -$LIGHT variants not found/built, nothing to remove."
	fi

}

clean-all () {

echo "********************"
echo "CLEANING EVERYTHING:"
echo "********************"

ECHO_MSG=echo

	clean-git $ECHO_MSG
	clean-build $ECHO_MSG

}

#############
# Main stuff:
#############

for arg in "$@"
do
	case "$arg" in
		clrgit)
			clean-git
			;;
		clrbuild)
			clean-build
			;;
		clrall)
			clean-all
			;;
		gblue)
			grey-blue
			;;
		ggreen)
			grey-green
			;;
		ggrey)
			grey-grey
			;;
		dblue)
			dark-blue
			;;
		dgreen)
			dark-green
			;;
		dgrey)
			dark-grey
			;;
		all)
			grey-blue
			grey-green
			grey-grey
			dark-blue
			dark-green
			dark-grey
			;;
		*)
			echo "Argument needed"
			;;
	esac
done


